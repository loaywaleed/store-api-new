"""
Django settings for bogo_plus project.

Generated by 'django-admin startproject' using Django 4.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import json
from datetime import timedelta
from os.path import join, normpath
from pathlib import Path

# from bit68_notifications.conf import FIREBASE_NOTIFICATION
from corsheaders.defaults import default_headers
from decouple import config

# from bogo_plus.packageapp.after_payment import after_payment_fail, after_payment_success

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY", default=False, cast=str)
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS = ["*"]

AUTH_USER_MODEL = "userapp.User"
AUTHENTICATION_BACKENDS = [
    "storeproject.core.authentication.CustomEmailorPhoneAuthentication",
    "django.contrib.auth.backends.ModelBackend",
]
# Application definition


DJANGO_APPS = [
    "unfold",
    "unfold.contrib.filters",
    "unfold.contrib.forms",
    # "unfold.contrib.import_export",
    # "modeltranslation",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "django.contrib.gis",
]
THIRD_PARTY_APPS = [
    "allauth",
    "allauth.account",
    "dj_rest_auth.registration",
    "rest_framework_simplejwt.token_blacklist",
    # "dj_rest_auth.jwt_auth",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    # "import_export",
    "django_filters",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.facebook",
    "dj_rest_auth",
]

# local apps
LOCAL_APPS = [
    "storeproject.core",
    "storeproject.userapp",
]
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS
SITE_ID = 1


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

REST_AUTH = {"USE_JWT": True}
ROOT_URLCONF = "storeproject.urls"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


WSGI_APPLICATION = "storeproject.wsgi.application"
# ASGI_APPLICATION = "bogo_plus.asgi.application"

# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedisChannelLayer",
#         "CONFIG": {
#             "hosts": [(config("REDIS_HOST", cast=str), config("REDIS_PORT", cast=str))],
#         },
#     },
# }

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": config("POSTGRES_DB", cast=str),
        "USER": config("POSTGRES_USER", cast=str),
        "PASSWORD": config("POSTGRES_PASSWORD", cast=str),
        "HOST": config("POSTGRES_HOST", cast=str),
        "PORT": config("POSTGRES_PORT", cast=str),
    }
}
# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en"

TIME_ZONE = "Africa/Cairo"

# USE_I18N = True
USE_I18N = False

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


def gettext(s):
    return s  # noqa


# LANGUAGES = (("en", gettext("English")), ("ar", gettext("Arabic")))
# MODELTRANSLATION_DEFAULT_LANGUAGE = "en"

# LOCALE_PATHS = (normpath(join(BASE_DIR, "locale")),)


STATIC_DIRECTORY = "/static/"
MEDIA_DIRECTORY = "/media/"
AUTH_PASSWORD_VALIDATORS = []
AWS_QUERYSTRING_AUTH = False


""" CORS ORIGIN """
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = (*default_headers, "company")


""" REST FRAMEWORK """
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    # "DEFAULT_PAGINATION_CLASS": "storeproj.services.paginator.CustomPagination",
    # "PAGE_SIZE": 5,
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ),
}

""" JWT Settings"""

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=int(config("ACCESS_TOKEN_LIFETIME", 5))),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=60),
    "UPDATE_LAST_LOGIN": True,
}

""" All Auth Settings"""
SOCIALACCOUNT_PROVIDERS = {}
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "none"

""" Rest Auth settings """
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_UNIQUE_EMAIL = True

UNFOLD = {
    "SITE_TITLE": "Bogo Admin",
    "SITE_HEADER": "Bogo Admin",
    "SIDEBAR": {
        "show_search": True,
        "show_all_applications": True,
    },
}
# CRON_CLASSES = [
#     "bogo_plus.brandapp.crons.BrandSorting",
#     "bogo_plus.packageapp.crons.LeaderBoardPrizes",
#     "bogo_plus.packageapp.crons.DeleteUnpaidUserPackages",
#     "bogo_plus.packageapp.crons.ToggleCouponIsActive",
#     "bogo_plus.packageapp.crons.DeactivateExpiredUserPackages",
#     "bogo_plus.offerapp.crons.DeleteUnclaimedRequests",
# ]
# TESTING = False
# RQ_SHOW_ADMIN_LINK = True

# DATA_UPLOAD_MAX_NUMBER_FIELDS = 10000000
# CKEDITOR_UPLOAD_PATH = "uploads/"
# CKEDITOR_CONFIGS = {
#     "default": {
#         "toolbar": [
#             {
#                 "name": "basicstyles",
#                 "items": ["Bold", "Italic", "Underline", "Strike", "RemoveFormat"],
#             },
#             {
#                 "name": "paragraph",
#                 "items": ["NumberedList", "BulletedList", "-", "Outdent", "Indent"],
#             },
#             {"name": "links", "items": ["Link", "Unlink"]},
#             {"name": "insert", "items": ["Image", "Table"]},
#             {"name": "styles", "items": ["Format"]},
#             {"name": "tools", "items": ["Maximize"]},
#         ],
#         "height": 300,
#         "width": "auto",
#     },
# }
